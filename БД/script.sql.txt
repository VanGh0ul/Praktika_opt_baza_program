create database skladik;

use skladik;

create table user_role (
	id int unsigned primary key auto_increment,

	name varchar(20)
);

insert into user_role(name)
values ("admin"), ("usual");


create table user (
	id int unsigned primary key auto_increment,
	name varchar (50),
	email varchar(50) unique,
	password varchar(40),
	
	role_id int unsigned,
	index(role_id),
	foreign key (role_id) references user_role(id)
		on delete restrict
		on update restrict,

	reg_date date	
);

create table organization(
	id int unsigned primary key auto_increment,
	name varchar(50),
	index(name),
	deliver_adres varchar(50),
	about text,
	email varchar(50) unique,
	phone varchar(12),
	avatar blob(5200000),
	reg_date date
);

create table organization_content(
	organization_id int unsigned,
	index(organization_id),
	foreign key (organization_id) references organization(id)
		on delete restrict
		on update restrict,

	user_id int unsigned,
	index(user_id),
	foreign key (user_id) references user(id)
		on delete restrict
		on update restrict,

	unique index(organization_id, user_id)
);


create table measure_unit(
	id int unsigned primary key auto_increment,
	name varchar(30)
);

create table category(
	id int unsigned primary key auto_increment,
	name varchar(30)
);


create table product(
	id int unsigned primary key auto_increment,
	name varchar(50),
	index(name),

	about text,
	img blob(5200000),
	added_on date,
	modified_on date,
	price int unsigned,
	
	measure_unit_id int unsigned,
	index(measure_unit_id),
	foreign key (measure_unit_id) references measure_unit(id)
		on delete restrict
		on update restrict,

	category_id int unsigned,
	index(category_id),
	foreign key (category_id) references category(id)
		on delete restrict
		on update restrict
);

create table balance(
	product_id int unsigned,
	unique index(product_id),
	foreign key (product_id) references product(id)
		on delete restrict
		on update restrict,

	quantity int unsigned
);

create table operation(
	id int unsigned primary key auto_increment,

	user_id int unsigned,
	index(user_id),
	foreign key (user_id) references user(id)
		on delete restrict
		on update restrict,

	product_id int unsigned,
	index(product_id),
	foreign key (product_id) references balance(product_id)
		on delete cascade
		on update cascade,

	quantity int
);


create table order_status (
	id int unsigned primary key auto_increment,
	name varchar(50)
);


create table buy_order(
	id int unsigned primary key auto_increment,

	buyer_id int unsigned,
	index(buyer_id),
	foreign key (buyer_id) references organization(id)
		on delete restrict
		on update restrict,

	sent_on date,
	deliver_date date,

	status_id int unsigned,
	index(status_id),
	foreign key (status_id) references order_status(id)
		on delete restrict
		on update restrict,

	order_sum int unsigned
);

select p.id, b.quantity as quant, s.name as sel_name, p.name as prod_name, p.img, p.added_on, p.price, m.name as m_unit 
from product p, organization s, measure_unit m, balance b 
where p.measure_unit_id = m.id and p.id = b.product_id;



insert into category(name)
values
("Крупы"),
("Корм для животных"),
("Мясо"),
("Овощи"),
("Рыба"),
("Фрукты");